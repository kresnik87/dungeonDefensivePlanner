security:
  encoders:
    Nucleos\UserBundle\Model\UserInterface: auto
  role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: ROLE_ADMIN
  access_decision_manager:
    strategy: unanimous
    allow_if_all_abstain: false
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    nucleos_userbundle:
      id: nucleos_user.user_provider.username
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api:
      pattern: ^/api/
      stateless: true
      provider: app_user_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
      json_login:
        check_path: /api/login_check
        username_path: username
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    main:
      lazy: true
      pattern: ^/
      form_login:
          provider: nucleos_userbundle
          csrf_token_generator: security.csrf.token_manager
          login_path: /login
          always_use_default_target_path: false
          default_target_path: /admin
      logout: true

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/admin, roles: [ IS_AUTHENTICATED_FULLY, ROLE_SUPER_ADMIN ] }
    - { path: ^/api/index.html$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/index.json$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/index.jsonld$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/docs.json, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/_profiler, role: ROLE_SUPER_ADMIN }
